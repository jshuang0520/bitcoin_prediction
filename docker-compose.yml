services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - kafka-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_CLEANUP_POLICY: "delete"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_started
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 30 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic bitcoin-prices --partitions 1 --replication-factor 1 &&
        echo 'Kafka setup completed successfully'
      "
    networks:
      - kafka-network
    restart: on-failure:3

  data-collector:
    build:
      context: .
      dockerfile: data_collector/Dockerfile
    container_name: data-collector
    volumes:
      - ./data:/app/data:rw
      - ./configs:/app/configs:ro
      - ./data_collector/scripts:/app/scripts:ro
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=bitcoin-prices
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep python | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  bitcoin-forecast-app:
    build:
      context: .
      dockerfile: bitcoin_forecast_app/Dockerfile
    command: python /app/bitcoin_forecast_app/mains/run_instant.py
    volumes:
      - ./data:/app/data
    depends_on:
      - kafka
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=bitcoin-prices
      # Optimize TensorFlow performance
      - TF_CPP_MIN_LOG_LEVEL=2
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - TF_XLA_FLAGS=--tf_xla_enable_xla_devices
      - TF_FP16_CONV_USE_FP32_COMPUTATIONS=1
      - TF_ENABLE_AUTO_MIXED_PRECISION=1
      # Memory optimization flags
      - PYTHONHASHSEED=0
      # Service tuning
      - MODEL_BATCH_SIZE=64
      - MODEL_VARIATIONAL_STEPS=150
      - MODEL_LEARNING_RATE=0.03
    networks:
      - kafka-network
    # Allocate more resources for the forecast model
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep python | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  web-app:
    build:
      context: ./web_app
      dockerfile: Dockerfile
    container_name: web-app
    ports:
      - "5001:5000"
    volumes:
      - ./data:/app/data:rw
      - ./configs:/app/configs:ro
      - ./utilities:/app/utilities:ro
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_NAME=web_app
    networks:
      - kafka-network
    depends_on:
      bitcoin-forecast-app:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    container_name: dashboard
    volumes:
      - ./data:/app/data:rw
      - ./configs:/app/configs:ro
    ports:
      - "8501:8501"
    depends_on:
      bitcoin-forecast-app:
        condition: service_started
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8501/_stcore/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
    networks:
      - kafka-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/clusters || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:

networks:
  kafka-network:
    driver: bridge
