# Unified Configuration File for Bitcoin Price Forecasting System
# This file contains configuration for all services in the system

# Global application settings
app:
  name: "BitcoinForecastSystem"
  version: "1.0.0"
  log_level: "INFO"
  log_format: "%(asctime)s | %(levelname)s | %(name)s.%(funcName)s() | %(message)s"
  log_date_format: "%Y-%m-%d %H:%M:%S"

# Global data paths (shared across services)
data:
  raw_data:
    instant_data:
      file: /app/data/raw/instant_data.csv
    historical_data:
      file: /app/data/raw_data/bitcoin_history_365d.csv
  predictions:
    instant_data:
      predictions_file: /app/data/predictions/instant_predictions.csv
      metrics_file: /app/data/predictions/instant_metrics.csv
    history_data:
      predictions_file: /app/data/predictions/history_data/history_predictions.csv
      metrics_file: /app/data/predictions/history_data/history_metrics.csv

# Global data format configuration (shared across services)
data_format:
  timestamp:
    format: "%Y-%m-%dT%H:%M:%S"  # ISO8601 format with T separator
    timezone: "UTC"
    precision: "seconds"  # Round all timestamps to seconds
  columns:
    raw_data:
      names: ['timestamp', 'open', 'high', 'low', 'close', 'volume']
      dtypes:
        timestamp: 'datetime64[ns]'
        open: 'float64'
        high: 'float64'
        low: 'float64'
        close: 'float64'
        volume: 'float64'
    predictions:
      names: ['timestamp', 'pred_price', 'pred_lower', 'pred_upper']
      dtypes:
        timestamp: 'datetime64[ns]'
        pred_price: 'float64'
        pred_lower: 'float64'
        pred_upper: 'float64'
    metrics:
      names: ['timestamp', 'std', 'mae', 'rmse', 'actual_error']
      dtypes:
        timestamp: 'datetime64[ns]'
        std: 'float64'
        mae: 'float64'
        rmse: 'float64'
        actual_error: 'float64'

# Kafka configuration (shared across services)
kafka:
  bootstrap_servers: kafka:29092
  topic: bitcoin-prices
  security_protocol: PLAINTEXT
  consumer:
    group_id: "bitcoin-forecast-group"
    auto_offset_reset: "latest"
    enable_auto_commit: true
    session_timeout_ms: 60000
    heartbeat_interval_ms: 20000
    max_poll_interval_ms: 600000
    retry_backoff_ms: 1000
    reconnect_backoff_ms: 1000
    reconnect_backoff_max_ms: 5000
    max_poll_records: 10
    fetch_max_wait_ms: 500
    fetch_min_bytes: 1
    fetch_max_bytes: 1048576  # 1MB

# Service-specific configurations
services:
  # Data Collector service configuration
  data_collector:
    poll_interval: 1  # seconds between data collection
    api:
      base_url: "https://api.binance.com"
      endpoint: "/api/v3/ticker/price"
      symbol: "BTCUSDT"
      timeout: 5  # seconds
    retry:
      max_attempts: 3
      backoff_factor: 2  # seconds
    
  # Bitcoin Forecast App service configuration
  bitcoin_forecast_app:
    model:
      instant:
        evaluation_window: 300  # 5 minutes in seconds
        forecast_horizon: 1     # 1 second ahead
        learning_rate: 0.01     # Learning rate for model training
        vi_steps: 100           # Number of variational inference steps
        num_samples: 50         # Number of samples for forecasting
        max_history_size: 1000  # Maximum number of data points to keep in history
        min_points_req: 10      # Minimum number of data points required for model fitting
        feature_windows:        # Feature windows configuration
          log_return: 5         # 5-minute window for log returns
          vol_rolling: [15, 30, 60]  # List of windows for volatility rolling window
          ma_short: 30          # 30-minute window for short-term moving average
          ma_long: 120          # 2-hour window for long-term moving average
        resample_freq: "5T"     # 5-minute intervals
        lookback: 60            # Lookback period for features
        window_size: 300        # 5 minutes in seconds
        initial_data_points: 1000  # Limit initial data load
        update_interval: 60     # Update model every 60 seconds
        # Advanced model parameters
        use_mcmc: false         # Use MCMC for more accurate but slower inference
        mcmc_steps: 1000        # Number of MCMC steps (only used if use_mcmc=true)
        mcmc_burnin: 300        # Number of burn-in steps for MCMC
        use_day_of_week: true   # Add day-of-week seasonal component
        use_technical_indicators: true  # Use technical indicators for better predictions
        # Technical indicators configuration
        short_ma_window: 5      # Short moving average window
        long_ma_window: 20      # Long moving average window
        volatility_window: 10   # Window for volatility calculation
      history:
        evaluation_window: 168  # hours (1 week)
        forecast_horizon: 24    # steps
        learning_rate: 0.01     # Learning rate for model training
        vi_steps: 1000          # Number of variational inference steps
        num_samples: 1000       # Number of samples for forecasting
        num_seasons: 7          # Number of seasons for seasonal model
        rolling_vol: 7          # Days for rolling volatility calculation
        seasonal_period: 24     # Hours in a seasonal period
    memory:
      cleanup_interval: 0.1     # seconds between garbage collection
      sleep_interval: 0.1       # seconds between main loop iterations

  # Dashboard service configuration
  dashboard:
    refresh_interval: 1         # seconds between frontend updates
    default_time_range_days: 1
    chart_height: 600
    theme: "plotly_white"
    data_aggregation: "1S"      # 1-second intervals for real-time data
    cold_start:
      enabled: true             # Enable cold start mode for better visualization with limited data
      min_data_points: 10       # Minimum number of data points needed to show the chart
    plot_settings:
      time_window: 3600         # seconds to show in the plot (60 minutes)
      time_window_minutes: 60   # minutes to show in all plots (consistent across all charts)
      update_interval: 1        # seconds between plot updates
      max_points: 3600          # maximum number of points to show (1 point per second for 60 minutes)
      resample_freq: "1S"       # resample frequency for data aggregation
      time_alignment:
        mode: "right"           # align plot to right (latest time)
        padding: 10             # seconds of padding on the right
        auto_range: true        # automatically adjust range to show latest data
      axis:
        x:
          type: "date"
          tickformat: "%H:%M:%S"
          tickangle: -45
          tickmode: "auto"
          nticks: 10
        y:
          type: "linear"
          autorange: true
          fixedrange: false
    colors:
      actual: "#3498db"         # Blue for actual prices
      predicted: "#f39c12"      # Orange for predictions
      confidence: "rgba(243, 156, 18, 0.2)"  # Semi-transparent orange for confidence intervals
      actual_up: "#2ecc71"      # Green for price increase
      actual_down: "#e74c3c"    # Red for price decrease

  # Web App service configuration
  web_app:
    backend:
      host: "0.0.0.0"
      port: 5000
      debug: false
    refresh_interval: 1         # seconds between frontend updates
    time_window_minutes: 30     # minutes to show in all plots by default
    cold_start:
      enabled: true
      min_data_points: 10
    colors:
      actual: "#3498db"         # Blue for actual prices
      predicted: "#f39c12"      # Orange for predictions
      confidence: "rgba(243, 156, 18, 0.2)"  # Semi-transparent orange for confidence intervals
      actual_up: "#2ecc71"      # Green for price increase
      actual_down: "#e74c3c"    # Red for price decrease 